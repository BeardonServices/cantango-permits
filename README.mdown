# CanTango Permits

The Permit system for [CanTango](https://github.com/kristianmandrup/cantango).

Permits are a way to partition Ability rules into logical units. 

*CanTango Permits* includes:

* a basic set of useful permits
* a permit engine to execute the permits

The Permits systems comes with a few useful Permit types out-of-the-box, but you are free to develop your own to suit your needs.

## Basic set of permits

The set of Permits types included are: 

* Base
* User < Base
* UserType < Base
* AccountType < Base
* Special < Base

You can easily customize or create your own types of Permits to suit your needs!
The Permit system will introspect the ability candidate and see which Permits apply and then build and execute these permits automatically, merging all the resulting rule sets into one. 

The cantango-roles system adds Permit types for the following:

* Role < Base
* RoleGroup < Base

## Permit system

The permit system iterates over all the registered types of permits and executes all registered permits of each type. The result is a set of Ability rules that work with the [CanCan](http://github.com/ryanb/cancan) Ability mechanism.

## Defining Permits and Licenses in your app

The `app/permits` folder will be added to Rails autoloading.
The directory layout should be the following:

```text
- /app
  - /permits
    - /license
      - blogging
      - /admin
        - blogging
    - /permit
      - /role
         - editor
      - /role_group
         - editors
      - /user_type
         - admin
      -/admin (account)
         - /role
           - editor
```

Default _:editor_ Role permit (scope less):

```ruby
module Permit::Role
	class Editor < CanTango::Permit::Role
    def calc_rules
      can :edit, Post
    end

    module Cache
      def calc_rules
        can :edit, Post
      end
    end
	end
end
```

The _:editor_ Role permit applicable for the Admin scope. Typically the scope is linked to the account (but doesn't have to be).

```ruby
module Permit::Admin::Role
	class Editor < CanTango::Permit::Role
	  def calc_rules
	    can :edit, Post if session[:edit_mode]
	  end
	
	  modes :no_cache
	end
end
```

Here the `#modes` macro is used to indicate that this Permit should only be executed for the `:no_cache` mode.

### Licenses

Default _:blogging_ License (scope less):

```ruby
module License
	class Blogging < CanTango::License
    def calc_rules
      can :edit, Post
    end

    module Cache
      def calc_rules
        can :edit, Post
      end
    end
	end
end
```

The _:editor_ License applicable for the Admin scope. Typically the scope is linked to the account (but doesn't have to be).

```ruby
module License::Admin
	class Blogging < CanTango::License
	  def calc_rules
	    can :edit, Post
	  end
	
	  modes :all
	end
end
```


## Install 'cantango-permits' gem

### In current environment (or gemset)

`gem install cantango-permits`

### In application

Insert into Gemfile

`gem 'cantango-permits'`

Run bundler in a terminal/console from the folder of your Gemfile (root folder of app)

`$ bundle`

### Usage

```ruby
require 'cantango/permits'
require 'cantango/permit_engine'
```

## Designing a custom Permit

The Permit system has been designed to be easy to extend with your own types of Permits to suit your
own needs. Here is an example of how to implement the Permit API.

```ruby
module CanTango::Permit
  class MyOwn < Base
		# creates the permit
		# @param [CanTango::Ability] the ability
		def initialize ability
		  super
		end

		# how to cache it?
		def self.hash_key
      permit_name(self)
		end_

		# Determine if permit is valid (applies) for the subject
		# @return (true|false)
		def valid?
		  false
		end
	end
end
```

## Create custom permit builder

```ruby
module CanTango::Builder::Permit
  class AccountType < Base
    # return list of permits built?
    def build
      return [] if !user_account
      [permit].compact
    end

    protected

    def permit
      create_permit(user_account.class.to_s)
    end
  end
end
```

## Configuration

Turn on/off: Enable and disable types of permits and specific permits

```ruby
CanTango.config.permits do |permits|
	# which types of permits to enable
	permits.enabled_types :user_type, :account_type

	permits.enable_all_for :account_type
	permits.disable_types :user_type, :account_type
	permits.disable_for :user_type, :admin, :editor
end
```

Registration: Which permits have been registered (and for which types)

```ruby
CanTango.config.permits do |permits|
	permits.registry_for :account_type # Registry for :account_type permits
	permits.registered_for :account_type # names of AccountType permits
	permits.all
	permits.show_all
end
```

Debug: Which permits allowed/denied specific actions for specific candidates to be taken

```ruby
CanTango.config.permits do |permits|
	permits.allowed candidate, actions, subjects, *extra_args
	permits.denied candidate, actions, subjects, *extra_args
end
```

### Permits Engine

The Permits engine can be configured as any other CanTango Engine:
Use the `on!` and `off!` methods to enable to disable use of the engine.
Use the `mode=` to set the execution mode.

```ruby
CanTango.config.engine(:permits) do |engine|
  # toggle engine on/off
	engine.on!
	engine.on?
	engine.off!
	engine.valid_mode_names # => [:cache, :no_cache, :both]

  # set execution modes
	engine.mode = :both
	engine.modes # => [:cache, :no_cache]
end
```

## Permits finder

Will look up a particular registered Permit in the Permit registry (see Configuration).
Permits are registered automatically by an inheritance hook. If you want to override this, you need
to register your class directly (manually) with the the permits registry.

```ruby
module CanTango::Finder::Permit
  class Base
  	def initialize name, type
    	@name, @type = [name, type]
  	end
  end
end
```

## Permits Factory

Builds and returns a list of all enabled permits of a specific type

```ruby
module CanTango::Factory
  class Permits
    def initialize ability, type
      @ability = ability
    end

    # @return Array<Permit>
    def create
			permits.build
    end
  end
end
```

## Categories

Categories are loaded from a Yaml file (by default `categories.yaml`). The loader `CanTango::Loader::Categories` is based on the `CanTango::Loader::Yaml` from _cantango-core_. 
The parser `CanTango::Parser::Categories` parses the yaml into a hash referencing constants (models).

## Macros

The macro `#tango_permit` can be used to attempt to register a Permit class with the Permits registry based on naming conventions and options passed in.

```ruby
class MySuperPermit < CanTango::Permit::Base
  tango_permit :name => :super, :type => :user_type, :account => :admin

  # the internals
end
```

## Engine

```ruby
module CanTango::Engine
  class Permits
		def initialize ability
		  super
		end

		def calc_rules
		  # push result of each permit type execution into main ability rules array
		  permits.each_pair do |type, permits|
		    perm_rules = executor(type, permits).execute!
		    rules << perm_rules if !perm_rules.blank?
		  end
		end

		def executor type, permits
		  CanTango::Ability::Executor::PermitType.new self, type, permits(type)
		end
		
    def permits type
      @permits ||= permits_factory(type).build!
    end

    def permits_factory type
      @permits_factory ||= CanTango::Factory::Permits.new self, type
    end
  end
end
```

## Design goals

This CanTango extension should have the least amount of dependencies on other extensions.
For this reason, all dependencies to _cantango-config_ should be removed. 
In _cantango-config_ the relevant modules/classes should be monkey-patched in order to
use the configuration.

## Contributing to Cantango Api
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

## Copyright

Copyright (c) 2011 Kristian Mandrup. See LICENSE.txt for
further details.

